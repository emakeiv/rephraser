name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: rephraser-api 
  GAR_LOCATION: europe-central2
  GKE_CLUSTER: rephraser-api 
  GKE_ZONE: europe-central2-a  
  DEPLOYMENT_NAME: rephraser-api-deployment 
  REPOSITORY: rephraser-api-repo  
  IMAGE: rephraser-api-image
  VERSION_TAG: ${{ steps.generate-version-tag.outputs.version_tag }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up GCP Service Account
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Docker configuration
      run: |-
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
  
    - name: Build
      id: generate-version-tag
      run: |-
        echo "::set-output name=version_tag::$(date +'%Y%m%d%H%M%S')"
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$VERSION_TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    - name: Print VERSION_TAG
      run: echo "VERSION_TAG: $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$VERSION_TAG"
   
    - name: Publish
        run: |-
          VERSION_TAG=$(date +'%Y%m%d%H%M%S')
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$VERSION_TAG"

    - name: Deploy
      run: |-
        kubectl apply -f kubectl/deployment.yml
    - name: Serve
      run: |-
        kubectl apply -f kubectl/service.yml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
